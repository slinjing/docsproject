import{a as r,c as t,e as o,o as c}from"./app-DDaEcaFE.js";const a={};function n(i,e){return c(),t("div",null,e[0]||(e[0]=[o('<h2 id="什么是-docker" tabindex="-1"><a class="header-anchor" href="#什么是-docker"><span>什么是 Docker</span></a></h2><p><strong>Docker</strong> 是一个开源的应用容器引擎，可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。它允许开发者将应用程序及其依赖环境一起打包到一个容器中，然后可以在任何平台上运行。</p><h2 id="docker-的核心概念" tabindex="-1"><a class="header-anchor" href="#docker-的核心概念"><span>Docker 的核心概念</span></a></h2><p>Docker 的核心包括三个主要部分：镜像、容器和仓库。</p><ul><li><p>镜像：镜像是一个只读的模板，用于创建 Docker 容器。它包含了运行应用程序所需的所有依赖、库、资源和配置文件。镜像是静态的，不包含任何动态数据。</p></li><li><p>容器：容器是镜像的运行实例。它是一个轻量级的、独立的执行环境，包含了应用程序及其所有依赖。容器是动态的，可以启动、停止、删除和迁移。</p></li><li><p>仓库：仓库是存放镜像的地方，类似于代码仓库。<a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">Docker Hub</a> 是一个公共的 Docker 镜像仓库，用户可以在上面上传和下载镜像。</p></li></ul><h2 id="docker-—-从入门到实践" tabindex="-1"><a class="header-anchor" href="#docker-—-从入门到实践"><span><a href="https://yeasy.gitbook.io/docker_practice" target="_blank" rel="noopener noreferrer">Docker — 从入门到实践</a></span></a></h2><ul><li>在线阅读：<a href="https://vuepress.mirror.docker-practice.com/" target="_blank" rel="noopener noreferrer">docker-practice.com</a>，<a href="https://yeasy.gitbook.io/docker_practice/" target="_blank" rel="noopener noreferrer">GitBook</a>，<a href="https://github.com/yeasy/docker_practice/blob/master/SUMMARY.md" target="_blank" rel="noopener noreferrer">Github</a></li><li>离线阅读：<a href="https://github.com/yeasy/docker_practice/wiki/%E7%A6%BB%E7%BA%BF%E9%98%85%E8%AF%BB%E5%8A%9F%E8%83%BD%E8%AF%A6%E8%A7%A3" target="_blank" rel="noopener noreferrer"><code>$ docker run -it --rm -p 4000:80 ccr.ccs.tencentyun.com/dockerpracticesig/docker_practice:vuepress</code></a></li></ul>',7)]))}const s=r(a,[["render",n]]),d=JSON.parse('{"path":"/notes/docker/","title":"Docker","lang":"zh-CN","frontmatter":{"title":"Docker","createTime":"2025/07/18 15:50:46","permalink":"/notes/docker/","description":"什么是 Docker Docker 是一个开源的应用容器引擎，可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。它允许开发者将应用程序及其依赖环境一起打包到一个容器中，然后可以在任何平台上运行。 Docker 的核心概念 Docker 的核心包括三个主要部分：镜像、容器和仓库。 镜像：镜像是一个只读的模板，用于创建 Docker 容器。它...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-28T01:48:08.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://slinjing.github.io/docsproject/docsproject/notes/docker/"}],["meta",{"property":"og:site_name","content":"slinjing"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"什么是 Docker Docker 是一个开源的应用容器引擎，可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。它允许开发者将应用程序及其依赖环境一起打包到一个容器中，然后可以在任何平台上运行。 Docker 的核心概念 Docker 的核心包括三个主要部分：镜像、容器和仓库。 镜像：镜像是一个只读的模板，用于创建 Docker 容器。它..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T01:48:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-28T01:48:08.000Z"}]]},"readingTime":{"minutes":1.15,"words":346},"git":{"createdTime":1753667288000,"updatedTime":1753667288000,"changelog":[{"hash":"dc2f577257f288da4a8c855da287097af3e2d526","time":1753667288000,"email":"878057672@qq.com","author":"https://github.com/slinjing/slinjing.github.io.git","message":"update"}]},"autoDesc":true,"filePathRelative":"notes/docker/README.md","headers":[]}');export{s as comp,d as data};
