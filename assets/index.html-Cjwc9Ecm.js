import{a as i,c as d,e as p,b as n,f as t,d as r,w as a,r as s,o as m}from"./app-DDaEcaFE.js";const l={};function c(g,e){const o=s("VPLink");return m(),d("div",null,[e[5]||(e[5]=p('<p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener noreferrer">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>',4)),n("p",null,[e[2]||(e[2]=t("按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 ",-1)),r(o,{href:"../data_management/volume.md"},{default:a(()=>e[0]||(e[0]=[t("数据卷（Volume）",-1)])),_:1,__:[0]}),e[3]||(e[3]=t("、或者 ",-1)),r(o,{href:"../data_management/bind-mounts.md"},{default:a(()=>e[1]||(e[1]=[t("绑定宿主目录",-1)])),_:1,__:[1]}),e[4]||(e[4]=t("，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。",-1))]),e[6]||(e[6]=n("p",null,"数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。",-1))])}const f=i(l,[["render",c]]),k=JSON.parse('{"path":"/notes/docker/kbl09y1v/","title":"容器","lang":"zh-CN","frontmatter":{"title":"容器","createTime":"2025/07/18 13:44:56","permalink":"/notes/docker/kbl09y1v/","description":"镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-28T01:48:08.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://slinjing.github.io/docsproject/docsproject/notes/docker/kbl09y1v/"}],["meta",{"property":"og:site_name","content":"slinjing"}],["meta",{"property":"og:title","content":"容器"}],["meta",{"property":"og:description","content":"镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T01:48:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-28T01:48:08.000Z"}]]},"readingTime":{"minutes":1.81,"words":544},"git":{"createdTime":1753667288000,"updatedTime":1753667288000,"changelog":[{"hash":"dc2f577257f288da4a8c855da287097af3e2d526","time":1753667288000,"email":"878057672@qq.com","author":"https://github.com/slinjing/slinjing.github.io.git","message":"update"}]},"autoDesc":true,"filePathRelative":"notes/docker/1.基本概念/2.容器.md","headers":[]}');export{f as comp,k as data};
