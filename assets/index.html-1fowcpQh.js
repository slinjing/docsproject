import{a as e,c as l,e as r,o as i}from"./app-DDaEcaFE.js";const n={};function a(s,t){return i(),l("div",null,t[0]||(t[0]=[r('<h2 id="组件版本" tabindex="-1"><a class="header-anchor" href="#组件版本"><span>组件版本</span></a></h2><table><thead><tr><th style="text-align:center;">组件</th><th style="text-align:center;">版本</th><th style="text-align:center;">发布时间</th></tr></thead><tbody><tr><td style="text-align:center;">kubernetes</td><td style="text-align:center;">1.16.6</td><td style="text-align:center;">2020-01-22</td></tr><tr><td style="text-align:center;">etcd</td><td style="text-align:center;">3.4.3</td><td style="text-align:center;">2019-10-24</td></tr><tr><td style="text-align:center;">containerd</td><td style="text-align:center;">1.3.3</td><td style="text-align:center;">2020-02-07</td></tr><tr><td style="text-align:center;">runc</td><td style="text-align:center;">1.0.0-rc10</td><td style="text-align:center;">2019-12-23</td></tr><tr><td style="text-align:center;">calico</td><td style="text-align:center;">3.12.0</td><td style="text-align:center;">2020-01-27</td></tr><tr><td style="text-align:center;">coredns</td><td style="text-align:center;">1.6.6</td><td style="text-align:center;">2019-12-20</td></tr><tr><td style="text-align:center;">dashboard</td><td style="text-align:center;">v2.0.0-rc4</td><td style="text-align:center;">2020-02-06</td></tr><tr><td style="text-align:center;">k8s-prometheus-adapter</td><td style="text-align:center;">0.5.0</td><td style="text-align:center;">2019-04-03</td></tr><tr><td style="text-align:center;">prometheus-operator</td><td style="text-align:center;">0.35.0</td><td style="text-align:center;">2020-01-13</td></tr><tr><td style="text-align:center;">prometheus</td><td style="text-align:center;">2.15.2</td><td style="text-align:center;">2020-01-06</td></tr><tr><td style="text-align:center;">elasticsearch、kibana</td><td style="text-align:center;">7.2.0</td><td style="text-align:center;">2019-06-25</td></tr><tr><td style="text-align:center;">cni-plugins</td><td style="text-align:center;">0.8.5</td><td style="text-align:center;">2019-12-20</td></tr><tr><td style="text-align:center;">metrics-server</td><td style="text-align:center;">0.3.6</td><td style="text-align:center;">2019-10-15</td></tr></tbody></table><h2 id="主要配置策略" tabindex="-1"><a class="header-anchor" href="#主要配置策略"><span>主要配置策略</span></a></h2><p><mark>kube-apiserver：</mark></p><ul><li>使用节点本地 nginx 4 层透明代理实现高可用；</li><li>关闭非安全端口 8080 和匿名访问；</li><li>在安全端口 6443 接收 https 请求；</li><li>严格的认证和授权策略 (x509、token、RBAC)；</li><li>开启 bootstrap token 认证，支持 kubelet TLS bootstrapping；</li><li>使用 https 访问 kubelet、etcd，加密通信；</li></ul><p><mark>kube-controller-manager：</mark></p><ul><li>3 节点高可用；</li><li>关闭非安全端口，在安全端口 10252 接收 https 请求；</li><li>使用 kubeconfig 访问 apiserver 的安全端口；</li><li>自动 approve kubelet 证书签名请求 (CSR)，证书过期后自动轮转；</li><li>各 controller 使用自己的 ServiceAccount 访问 apiserver；</li></ul><p><mark>kube-scheduler：</mark></p><ul><li>3 节点高可用；</li><li>使用 kubeconfig 访问 apiserver 的安全端口；</li></ul><p><mark>kubelet：</mark></p><ul><li>使用 kubeadm 动态创建 bootstrap token，而不是在 apiserver 中静态配置；</li><li>使用 TLS bootstrap 机制自动生成 client 和 server 证书，过期后自动轮转；</li><li>在 KubeletConfiguration 类型的 JSON 文件配置主要参数；</li><li>关闭只读端口，在安全端口 10250 接收 https 请求，对请求进行认证和授权，拒绝匿名访问和非授权访问；</li><li>使用 kubeconfig 访问 apiserver 的安全端口；</li></ul><p><mark>kube-proxy：</mark></p><ul><li>使用 kubeconfig 访问 apiserver 的安全端口；</li><li>在 KubeProxyConfiguration 类型的 JSON 文件配置主要参数；</li><li>使用 ipvs 代理模式；</li></ul><p><mark>集群插件：</mark></p><ul><li>DNS：使用功能、性能更好的 coredns；</li><li>Dashboard：支持登录认证；</li><li>Metric：metrics-server，使用 https 访问 kubelet 安全端口；</li><li>Log：Elasticsearch、Fluend、Kibana；</li><li>Registry 镜像库：docker-registry、harbor；</li></ul>',15)]))}const o=e(n,[["render",a]]),c=JSON.parse('{"path":"/notes/follow-me-install-kubernetes-cluster/r7cfivid/","title":"组件版本和配置策略","lang":"zh-CN","frontmatter":{"title":"组件版本和配置策略","createTime":"2025/07/11 11:40:54","permalink":"/notes/follow-me-install-kubernetes-cluster/r7cfivid/","description":"组件版本 主要配置策略 kube-apiserver： 使用节点本地 nginx 4 层透明代理实现高可用； 关闭非安全端口 8080 和匿名访问； 在安全端口 6443 接收 https 请求； 严格的认证和授权策略 (x509、token、RBAC)； 开启 bootstrap token 认证，支持 kubelet TLS bootstrappi...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件版本和配置策略\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-11T05:03:08.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://slinjing.github.io/docsproject/docsproject/notes/follow-me-install-kubernetes-cluster/r7cfivid/"}],["meta",{"property":"og:site_name","content":"slinjing"}],["meta",{"property":"og:title","content":"组件版本和配置策略"}],["meta",{"property":"og:description","content":"组件版本 主要配置策略 kube-apiserver： 使用节点本地 nginx 4 层透明代理实现高可用； 关闭非安全端口 8080 和匿名访问； 在安全端口 6443 接收 https 请求； 严格的认证和授权策略 (x509、token、RBAC)； 开启 bootstrap token 认证，支持 kubelet TLS bootstrappi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-11T05:03:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-11T05:03:08.000Z"}]]},"readingTime":{"minutes":1.55,"words":465},"git":{"createdTime":1752210188000,"updatedTime":1752210188000,"changelog":[{"hash":"af55e011a65b6be063928f38a8d67be00c11cea7","time":1752210188000,"email":"878057672@qq.com","author":"https://github.com/slinjing/slinjing.github.io.git","message":"update"}]},"autoDesc":true,"filePathRelative":"notes/follow-me-install-kubernetes-cluster/00.组件版本和配置策略.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"59eb5e","sort":10001,"name":"follow-me-install-kubernetes-cluster"}]}');export{o as comp,c as data};
